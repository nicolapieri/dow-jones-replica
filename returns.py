import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import statsmodels.api as sm


# setting time interval
start_date, end_date = "1992-01-01", "2022-12-31"

# downloading dow jones index and stocks datasets
DJI = pd.DataFrame(yf.download("^DJI", start=start_date, end=end_date))
MMM = pd.DataFrame(yf.download("MMM", start=start_date, end=end_date))
AXP = pd.DataFrame(yf.download("AXP", start=start_date, end=end_date))
AMGN = pd.DataFrame(yf.download("AMGN", start=start_date, end=end_date))
AAPL = pd.DataFrame(yf.download("AAPL", start=start_date, end=end_date))
BA = pd.DataFrame(yf.download("BA", start=start_date, end=end_date))
CAT = pd.DataFrame(yf.download("CAT", start=start_date, end=end_date))
CVX = pd.DataFrame(yf.download("CVX", start=start_date, end=end_date))
CSCO = pd.DataFrame(yf.download("CSCO", start=start_date, end=end_date))
KO = pd.DataFrame(yf.download("KO", start=start_date, end=end_date))
DOW = pd.DataFrame(yf.download("DOW", start=start_date, end=end_date))
GS = pd.DataFrame(yf.download("GS", start=start_date, end=end_date))
HD = pd.DataFrame(yf.download("HD", start=start_date, end=end_date))
HON = pd.DataFrame(yf.download("HON", start=start_date, end=end_date))
INTC = pd.DataFrame(yf.download("INTC", start=start_date, end=end_date))
IBM = pd.DataFrame(yf.download("IBM", start=start_date, end=end_date))
JNJ = pd.DataFrame(yf.download("JNJ", start=start_date, end=end_date))
JPM = pd.DataFrame(yf.download("JPM", start=start_date, end=end_date))
MCD = pd.DataFrame(yf.download("MCD", start=start_date, end=end_date))
MRK = pd.DataFrame(yf.download("MRK", start=start_date, end=end_date))
MSFT = pd.DataFrame(yf.download("MSFT", start=start_date, end=end_date))
NKE = pd.DataFrame(yf.download("NKE", start=start_date, end=end_date))
PG = pd.DataFrame(yf.download("PG", start=start_date, end=end_date))
CRM = pd.DataFrame(yf.download("CRM", start=start_date, end=end_date))
TRV = pd.DataFrame(yf.download("TRV", start=start_date, end=end_date))
UNH = pd.DataFrame(yf.download("UNH", start=start_date, end=end_date))
VZ = pd.DataFrame(yf.download("VZ", start=start_date, end=end_date))
V = pd.DataFrame(yf.download("V", start=start_date, end=end_date))
WBA = pd.DataFrame(yf.download("WBA", start=start_date, end=end_date))
WMT = pd.DataFrame(yf.download("MSFT", start=start_date, end=end_date))
DIS = pd.DataFrame(yf.download("MSFT", start=start_date, end=end_date))

# creating dataframe of adjusted closing prices
Returns = pd.DataFrame()
Returns['DJI Adj Returns'] = (DJI['Adj Close'] - DJI['Adj Close'].shift(1)) / DJI['Adj Close'].shift(1)
Returns['MMM Adj Returns'] = (MMM['Adj Close'] - MMM['Adj Close'].shift(1)) / MMM['Adj Close'].shift(1)
Returns['AXP Adj Returns'] = (AXP['Adj Close'] - AXP['Adj Close'].shift(1)) / AXP['Adj Close'].shift(1)
Returns['AMGN Adj Returns'] = (AMGN['Adj Close'] - AMGN['Adj Close'].shift(1)) / AMGN['Adj Close'].shift(1)
Returns['AAPL Adj Returns'] = (AAPL['Adj Close'] - AAPL['Adj Close'].shift(1)) / AAPL['Adj Close'].shift(1)
Returns['BA Adj Returns'] = (BA['Adj Close'] - BA['Adj Close'].shift(1)) / BA['Adj Close'].shift(1)
Returns['CAT Adj Returns'] = (CAT['Adj Close'] - CAT['Adj Close'].shift(1)) / CAT['Adj Close'].shift(1)
Returns['CVX Adj Returns'] = (CVX['Adj Close'] - CVX['Adj Close'].shift(1)) / CVX['Adj Close'].shift(1)
Returns['CSCO Adj Returns'] = (CSCO['Adj Close'] - CSCO['Adj Close'].shift(1)) / CSCO['Adj Close'].shift(1)
Returns['KO Adj Returns'] = (KO['Adj Close'] - KO['Adj Close'].shift(1)) / KO['Adj Close'].shift(1)
Returns['DOW Adj Returns'] = (DOW['Adj Close'] - DOW['Adj Close'].shift(1)) / DOW['Adj Close'].shift(1)
Returns['GS Adj Returns'] = (GS['Adj Close'] - GS['Adj Close'].shift(1)) / GS['Adj Close'].shift(1)
Returns['HD Adj Returns'] = (HD['Adj Close'] - HD['Adj Close'].shift(1)) / HD['Adj Close'].shift(1)
Returns['HON Adj Returns'] = (HON['Adj Close'] - HON['Adj Close'].shift(1)) / HON['Adj Close'].shift(1)
Returns['INTC Adj Returns'] = (INTC['Adj Close'] - INTC['Adj Close'].shift(1)) / INTC['Adj Close'].shift(1)
Returns['IBM Adj Returns'] = (IBM['Adj Close'] - IBM['Adj Close'].shift(1)) / IBM['Adj Close'].shift(1)
Returns['JNJ Adj Returns'] = (JNJ['Adj Close'] - JNJ['Adj Close'].shift(1)) / JNJ['Adj Close'].shift(1)
Returns['JPM Adj Returns'] = (JPM['Adj Close'] - JPM['Adj Close'].shift(1)) / JPM['Adj Close'].shift(1)
Returns['MCD Adj Returns'] = (MCD['Adj Close'] - MCD['Adj Close'].shift(1)) / MCD['Adj Close'].shift(1)
Returns['MRK Adj Returns'] = (MRK['Adj Close'] - MRK['Adj Close'].shift(1)) / MRK['Adj Close'].shift(1)
Returns['MSFT Adj Returns'] = (MSFT['Adj Close'] - MSFT['Adj Close'].shift(1)) / MSFT['Adj Close'].shift(1)
Returns['NKE Adj Returns'] = (NKE['Adj Close'] - NKE['Adj Close'].shift(1)) / NKE['Adj Close'].shift(1)
Returns['PG Adj Returns'] = (PG['Adj Close'] - PG['Adj Close'].shift(1)) / PG['Adj Close'].shift(1)
Returns['CRM Adj Returns'] = (CRM['Adj Close'] - CRM['Adj Close'].shift(1)) / CRM['Adj Close'].shift(1)
Returns['TRV Adj Returns'] = (TRV['Adj Close'] - TRV['Adj Close'].shift(1)) / TRV['Adj Close'].shift(1)
Returns['UNH Adj Returns'] = (UNH['Adj Close'] - UNH['Adj Close'].shift(1)) / UNH['Adj Close'].shift(1)
Returns['VZ Adj Returns'] = (VZ['Adj Close'] - VZ['Adj Close'].shift(1)) / VZ['Adj Close'].shift(1)
Returns['V Adj Returns'] = (V['Adj Close'] - V['Adj Close'].shift(1)) / V['Adj Close'].shift(1)
Returns['WBA Adj Returns'] = (WBA['Adj Close'] - WBA['Adj Close'].shift(1)) / WBA['Adj Close'].shift(1)
Returns['WMT Adj Returns'] = (WMT['Adj Close'] - WMT['Adj Close'].shift(1)) / WMT['Adj Close'].shift(1)
Returns['DIS Adj Returns'] = (DIS['Adj Close'] - DIS['Adj Close'].shift(1)) / DIS['Adj Close'].shift(1)

# plotting regression function of returns over the market
plt.scatter(Returns['DJI Adj Returns'], Returns['MMM Adj Returns'])
plt.title('Stock over market returns')
plt.xlabel('DJI Adj Returns')
plt.ylabel('MMM Adj Returns')
plt.show()
x = sm.add_constant(Returns['DJI Adj Returns'])
model = sm.OLS(Returns['MMM Adj Returns'], x).fit()
print(model.summary())
